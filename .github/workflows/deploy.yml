name: Terraform Deploy AWS

env:
  TFPath: tf/02_infra

on:
  push:
   branches: [ fortdevsec ]
  pull_request:
   branches: [ fortdevsec ]

jobs:
  validate:
    name: "Terraform Validate"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }} #needed for AWS S3 backend 
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }} #needed for AWS S3 backend 
      TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY }} #needed for TF
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET_KEY }} #needed for TF

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.1
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TFPath }}
        
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.TFPath }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TFPath }}

# Scanning for vulnerabilities in IAC

  scan:
    name: IAC scanning - Trivy
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          format: 'table'
          output: 'trivy-results.txt'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          skip-dirs: './tf/00_remote_state,./tf/01_aws_security'
        continue-on-error: true

      - name: Archive production artifacts
        id: upload_artifact
        uses: actions/upload-artifact@v3
        with:
          name: my-artifact-scan
          path: trivy-results.txt
          
  scan2:
    name: IAC scanning - FortiDevSec
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: FortiDevSec 
        id: FortiDevSec
        working-directory: ${{ env.TFPath }}
        run: |
          docker pull registry.fortidevsec.forticloud.com/fdevsec_sast:latest
          docker run -i --mount type=bind,source="$(pwd)",target=/scan  registry.fortidevsec.forticloud.com/fdevsec_sast:latest



# Terraform Plan
  plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: [scan, scan2]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }} #needed for AWS S3 backend 
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }} #needed for AWS S3 backend 
      TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY }} #needed for TF
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET_KEY }} #needed for TF

    steps:
      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.pull_request.base.ref }}'
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.1
          
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TFPath }}

      - name: Terraform Plan
        id: plan
#        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -out plan.tfplan
        continue-on-error: true
        working-directory: ${{ env.TFPath }}

      - name: Archive production artifacts
        id: upload_artifact
        uses: actions/upload-artifact@v3
        with:
          name: my-artifact-tfplan
          path: ${{ env.TFPath }}/plan.tfplan



# Infracost
  infracost:
    name: "Infracost"
    runs-on: ubuntu-latest
    needs: [plan]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }} #needed for AWS S3 backend 
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }} #needed for AWS S3 backend 
      TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY }} #needed for TF
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET_KEY }} #needed for TF

    steps:
      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.pull_request.base.ref }}'
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.1
          
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TFPath }}

      - uses: actions/download-artifact@v3
        with:
          name: my-artifact-tfplan
          path: ${{ env.TFPath }}

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost JSON
        working-directory: ${{ env.TFPath }}
        run: infracost breakdown --path ./plan.tfplan --format json --usage-file infracost-usage.yml --out-file /tmp/infracost.json
        
      - name: Archive production artifacts
        id: upload_artifact_2
        uses: actions/upload-artifact@v3
        with:
          name: my-artifact-infracost
          path: /tmp/infracost.json
          
      - name: Post Infracost comment
        run: |
            infracost comment github --path=/tmp/infracost.json \
                                     --repo=$GITHUB_REPOSITORY \
                                     --github-token=${{ secrets.GIT_TOKEN }} \
                                     --commit=$GITHUB_SHA \
                                     --behavior=new
# Terraform Deploy
  deploy:
    name: "Terraform Deploy"
    runs-on: ubuntu-latest
    needs: [infracost]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }} #needed for AWS S3 backend 
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }} #needed for AWS S3 backend 
      TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY }} #needed for TF
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET_KEY }} #needed for TF

    steps:
      - name: Checkout base branch
        uses: actions/checkout@v3
      
      - uses: actions/download-artifact@v3
        with:
          name: my-artifact-tfplan
          path: /tmp

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.1
          
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TFPath }}

      - name: Terraform Apply
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve /tmp/plan.tfplan
        working-directory: ${{ env.TFPath }}
